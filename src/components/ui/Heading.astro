---
interface Props {
  level?: number
  text: string
  gradient?: boolean
  class?: string
}

const { level = 2, text, gradient, class: className, ...props } = Astro.props

const levelClasses = {
  1: 'text-4xl lg:text-5xl',
  2: 'text-3xl lg:text-4xl',
  3: 'text-2xl lg:text-3xl',
  4: 'text-xl lg:text-2xl',
  5: 'text-lg lg:text-xl',
  6: 'text-base lg:text-lg',
}[level]

const gradientClasses = gradient
  ? 'bg-gradient-to-r from-[rgba(41,58,142,1)] to-[rgba(59,159,168)] text-transparent bg-clip-text'
  : '';

const colorClasses = gradient
  ? ''
  : '--tw-text-opacity: 1; color: rgb(var(--ac-color-500), var(--tw-text-opacity));'

const headingClasses = [levelClasses, gradientClasses, className]
  .filter(Boolean)
  .join(' ')
---

{level === 1 && <h1 class={headingClasses} style={colorClasses} {...props}>{text}</h1>}
{level === 2 && <h2 class={headingClasses} style={colorClasses} {...props}>{text}</h2>}
{level === 3 && <h3 class={headingClasses} style={colorClasses} {...props}>{text}</h3>}
{level === 4 && <h4 class={headingClasses} style={colorClasses} {...props}>{text}</h4>}
{level === 5 && <h5 class={headingClasses} style={colorClasses} {...props}>{text}</h5>}
{level === 6 && <h6 class={headingClasses} style={colorClasses} {...props}>{text}</h6>}