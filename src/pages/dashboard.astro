---
import Layout from '../layouts/Layout.astro';
import CTA from '../sections/CTA.astro';
import Header from '../components/layout/Header.astro';
import Content from '../layouts/Content.astro';
import Footer from '../components/layout/Footer.astro';
import Sidebar from '../layouts/Sidebar.astro';
import { eq, desc } from "drizzle-orm";
import { db } from "../db";
import { sessions, users, loginLogs } from "../db/schema";

interface RawGitHubCommit {
  sha: string;
  commit: {
    author: {
      name: string;
      email: string;
      date: string;
    };
    message: string;
  };
  author: {
    login: string;
    id: number;
    avatar_url: string;
  };
}

interface GitHubTag {
  name: string;
  commit: {
    sha: string;
  };
}

interface GitHubRelease {
  id: number;
  tag_name: string;
  name: string;
  target_commitish: string;
}

interface EnhancedCommit extends RawGitHubCommit {
  tags: GitHubTag[];
  releases: GitHubRelease[];
}

interface LemonSqueezyInvoice {
  id: string;
  attributes: {
    billing_reason: string;
    created_at: string;
    renews_at: string;
    total: string;
    urls: {
      invoice_url: string;
    };
  };
}

interface LemonSqueezyAttributes {
  status: string;
  status_formatted: string;
  product_name: string;
  card_brand: string;
  card_last_four: string;
  trial_ends_at: string | null;
  renews_at: string;
  created_at: string;
  urls: {
    update_payment_method: string;
    customer_portal: string;
  };
  customer_id: number;
  order_id: number;
}

const userIsLoggedIn = !!Astro.locals.userId;const sessionToken = Astro.cookies.get("app_auth_token")?.value;
if (!sessionToken) return Astro.redirect("/");

const userInfo = await db.query.sessions.findFirst({
  where: eq(sessions.id, sessionToken),
  with: {
    user: {
      with: {
        oauthTokens: {
          columns: {
            strategy: true,
            accessToken: true,
          },
        },
        loginLogs: {
          orderBy: desc(loginLogs.loggedInAt),
        },
      },
    },
  },
});

const githubToken = userInfo?.user?.oauthTokens?.find(token => token.strategy === 'github')?.accessToken;
if (!githubToken) return Astro.redirect("/login?error=missing+github+authorization");

async function getGithubUserData(token: string) {
  try {
    const response = await fetch("https://api.github.com/user", {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });

    if (!response.ok) throw new Error("Error al obtener datos del usuario desde GitHub");
    return await response.json();
  } catch (error) {
    console.error("Error:", error);
  }
}

async function getGithubUserRepos(token: string) {
  try {
    const response = await fetch("https://api.github.com/user/repos", {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });

    if (!response.ok) throw new Error("Error al obtener repositorios desde GitHub");
    return await response.json();
  } catch (error) {
    console.error("Error:", error);
  }
}

async function getRepoCommits(token: string, repo: string): Promise<EnhancedCommit[]> {
  const { login } = await getGithubUserData(token);
  const baseUrl = `https://api.github.com/repos/${login}/${repo}`;
  const commitsUrl = `${baseUrl}/commits`;
  const tagsUrl = `${baseUrl}/tags`;
  const releasesUrl = `${baseUrl}/releases`;

  async function getAllCommits(): Promise<RawGitHubCommit[]> {
    let allCommits: RawGitHubCommit[] = [];
    let page = 1;
    const perPage = 100;

    while (true) {
      const response = await fetch(`${commitsUrl}?page=${page}&per_page=${perPage}`, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Accept": "application/vnd.github.v3+json"
        }
      });

      if (!response.ok) throw new Error(`Failed to fetch commits: ${response.statusText}`);

      const commits: RawGitHubCommit[] = await response.json();
      allCommits = allCommits.concat(commits);

      if (commits.length < perPage) break;
      page++;
    }

    return allCommits;
  }

  try {
    const [commits, tags, releases] = await Promise.all([
      getAllCommits(),
      fetch(tagsUrl, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Accept": "application/vnd.github.v3+json"
        }
      }).then(res => res.json() as Promise<GitHubTag[]>),
      fetch(releasesUrl, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Accept": "application/vnd.github.v3+json"
        }
      }).then(res => res.json() as Promise<GitHubRelease[]>)
    ]);

    return commits.map((commit) => {
      const commitTags = tags.filter((tag) => tag.commit.sha === commit.sha);
      const commitReleases = releases.filter((release) => 
        release.target_commitish === commit.sha || 
        (release.tag_name && tags.find((tag) => tag.name === release.tag_name)?.commit.sha === commit.sha)
      );
      
      return {
        ...commit,
        tags: commitTags,
        releases: commitReleases,
        commit: {
          ...commit.commit,
          author: {
            ...commit.commit.author,
            date: new Date(commit.commit.author.date).toISOString()
          }
        }
      };
    });
  } catch (error) {
    console.error("Error fetching repository data:", error);
    return [];
  }
}

const githubUserData = await getGithubUserData(githubToken);
const githubUserRepos = await getGithubUserRepos(githubToken);
const { searchParams } = Astro.url;
const selectedRepo = searchParams.get('repo');

let commits: EnhancedCommit[] = [];
if (selectedRepo) {
  commits = await getRepoCommits(githubToken, selectedRepo);
}

const userId = userInfo?.user?.id;
const userEmail = userInfo?.user?.email;

let lemonSqueezyData: LemonSqueezyAttributes | null = null;
let licenseKey = null;
let invoices: LemonSqueezyInvoice[] = [];

const userData = userId ? await db.query.users.findFirst({
  where: eq(users.id, userId),
  columns: {
    plan: true
  }
}) : null;

const userPlan = userData?.plan || 'basic';

if (userPlan === 'pro' && userEmail) {
  try {
    const response = await fetch(`https://api.lemonsqueezy.com/v1/subscriptions?filter[user_email]=${userEmail}`, {
      headers: {
        'Authorization': `Bearer ${import.meta.env.LEMON_SQUEEZY_API_KEY}`,
        'Accept': 'application/vnd.api+json'
      }
    });
    
    if (response.ok) {
      const data = await response.json();
      const activeSubscription = data.data.find((sub: { attributes: LemonSqueezyAttributes }) => 
        sub.attributes.status === 'active' || 
        sub.attributes.status === 'on_trial'
      );
      
      if (activeSubscription) {
        lemonSqueezyData = activeSubscription.attributes;

        const [invoicesRes, customerRes] = await Promise.all([
          fetch(`https://api.lemonsqueezy.com/v1/subscriptions/${activeSubscription.id}/subscription-invoices`, {
            headers: {
              'Authorization': `Bearer ${import.meta.env.LEMON_SQUEEZY_API_KEY}`,
              'Accept': 'application/vnd.api+json'
            }
          }),
          fetch(`https://api.lemonsqueezy.com/v1/customers/${activeSubscription.attributes.customer_id}/license-keys`, {
            headers: {
              'Authorization': `Bearer ${import.meta.env.LEMON_SQUEEZY_API_KEY}`,
              'Accept': 'application/vnd.api+json'
            }
          })
        ]);

        if (invoicesRes.ok) {
          const invoicesData = await invoicesRes.json();
          invoices = invoicesData.data;
        }

        if (customerRes.ok) {
          const customerData = await customerRes.json();
          const activeLicense = customerData.data?.find(
            (license: any) => license.attributes.order_id === activeSubscription.attributes.order_id
          );
          if (activeLicense) {
            licenseKey = activeLicense.attributes.key;
          }
        }
      }
    }
  } catch (error) {
    console.error('Error fetching LemonSqueezy data:', error);
  }
}

// Variables para el template
const subscriptionInfo = {
  plan: userPlan,
  customerId: lemonSqueezyData?.customer_id
};
---

<Layout title="Gitset - Advanced AI-Driven GitHub Tools Suite.">
  <Sidebar />
  <div class="flex flex-col min-h-screen">
    <div class="hidden lg:block fixed w-64 h-full">
      <Sidebar />
    </div>
    
    <div class="flex-1 lg:ml-64 flex flex-col">
      <Header />
      <main class="flex-1 overflow-x-hidden mt-12 overflow-y-auto bg-gray-50">
        <div class="container relative top-[70px] mx-auto px-4 sm:px-6 lg:px-8 pt-2 lg:mt-0">
         
          <CTA
            align="center"
            title={`<span id="cta-title">Welcome to your <strong>Dashboard</strong></span>`}
            description={`
              <span id="cta-description">
                Access a detailed overview of your subscription status and easily manage your account details.
              </span>
            `}
          >
           <!-- Subscription Status Section -->
            <div class="max-w-3xl mx-auto my-0 mb-8 mt-4 rounded-lg">
              {subscriptionInfo?.plan === 'pro' ? (
                <!-- Tarjeta Pro -->
                <div class="mx-auto mb-8">
                  <div class="flex flex-col rounded-[12px] bg-gradient-to-r from-[rgba(41,58,142,1)] to-[rgba(59,159,168)]">
                    <div class="flex flex-col bg-neutral-100/90 dark:bg-neutral-800/90 border border-[rgba(59,159,168)] rounded-[10px] h-full">
                      <div class="flex flex-col flex-1 p-6 text-center">
                        <div class="mb-4">
                          <svg class="mx-auto h-12 w-12 text-[#69D3C6]" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>
                        </div>
                        <h3 class="text-lg mx-auto my-0 font-medium text-neutral-700 mb-2">Pro Plan Active</h3>
                        <p class="text-sm text-neutral-500 mb-6 mx-auto my-0">
                          You have unlimited access to all features.
                        </p>
                        <!-- Last checked agregado aquí -->
                        <p class="text-sm text-neutral-500 mx-auto my-0">
                          Last checked: <span id="lastCheckTimePro">Checking...</span>
                        </p>
                        
                      </div>
                      <div class="group bg-black py-2 rounded-b-[10px]">
                    <button
                      id="reloadButtonPro"
                      class="relative text-white flex w-full items-center justify-center px-4 py-2 hover:!text-[#69D3C6] transition-all duration-300 group-hover:bg-transparent disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      <span class="flex items-center text-sm font-medium">
                        Refresh Subscription Status
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          class="ml-2 transition-transform duration-500 group-hover:rotate-180"
                        >
                          <path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8" />
                          <path d="M21 3v5h-5" />
                          <path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16" />
                          <path d="M8 16H3v5" />
                        </svg>
                      </span>
                    </button>
                  </div>
                    </div>
                  </div>
                </div>

                      <!-- Subscription Details Grid -->
                      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        {/* Cards Container with equal height */}
                        
                        <div class="flex flex-col rounded-[12px] bg-gradient-to-r from-[rgba(41,58,142,1)] to-[rgba(59,159,168)]">
                          <div class="flex flex-col bg-neutral-100/90 dark:bg-neutral-800/90 border border-[rgba(59,159,168)] rounded-[10px] h-full">
                            <div class="flex flex-col flex-1 p-4">
                              <h4 class="font-medium text-neutral-700 mb-4 mx-auto my-0">Subscription Details</h4>
                              <div class="flex-1 space-y-4">
                                <div class="flex flex-col">
                                  <span class="text-sm text-neutral-500">Status</span>
                                  <span class="text-base font-medium text-neutral-700">
                                    {lemonSqueezyData?.status_formatted || 'Unknown'}
                                  </span>
                                </div>
                                <div class="flex flex-col">
                                  <span class="text-sm text-neutral-500">Plan</span>
                                  <span class="text-base font-medium text-neutral-700">
                                    {lemonSqueezyData?.product_name?.replace(': Advanced AI-Driven GitHub Tools Suite.', '') || 'Pro'}
                                  </span>
                                </div>
                              </div>
                            </div>

                            <div class="flex flex-col">
                                <span class="text-sm text-neutral-500">License Key</span>
                                <div class="flex -top-2 justify-center gap-2 relative">
                                  <span class="text-base mx-auto my-0 font-medium text-neutral-700">
                                    {"..." + (licenseKey ? licenseKey.slice(-6) : 'N/A')}
                                    <button
                                      onclick={`(() => {
                                        const fullLicenseKey = '${licenseKey}';
                                        if (fullLicenseKey) {
                                          navigator.clipboard.writeText(fullLicenseKey);
                                          const tooltip = document.createElement('div');
                                          tooltip.className = 'absolute -top-1 right-12 px-2 py-1 text-xs text-[#39cfc7] bg-neutral-700 dark:bg-neutral-200 rounded';
                                          tooltip.textContent = 'Copied!';
                                          this.parentNode.appendChild(tooltip);
                                          setTimeout(() => {
                                            tooltip.remove();
                                          }, 2000);
                                        }
                                      })()`}
                                      class="top-1 relative p-2 bg-hover:bg-neutral-700 dark:hover:bg-neutral-200 rounded-lg transition-colors"
                                      title="Copy license key"
                                    >
                                      <svg
                                        xmlns="http://www.w3.org/2000/svg"
                                        fill="none"
                                        viewBox="0 0 24 24"
                                        stroke-width="1.5"
                                        stroke="#68D4C6"
                                        class="size-5 text-gray-600 dark:text-neutral-700"
                                      >
                                        <path
                                          stroke-linecap="round"
                                          stroke-linejoin="round"
                                          d="M15.75 17.25v3.375c0 .621-.504 1.125-1.125 1.125h-9.75a1.125 1.125 0 0 1-1.125-1.125V7.875c0-.621.504-1.125 1.125-1.125H6.75a9.06 9.06 0 0 1 1.5.124m7.5 10.376h3.375c.621 0 1.125-.504 1.125-1.125V11.25c0-4.46-3.243-8.161-7.5-8.876a9.06 9.06 0 0 0-1.5-.124H9.375c-.621 0-1.125.504-1.125 1.125v3.5m7.5 10.375H9.375a1.125 1.125 0 0 1-1.125-1.125v-9.25m12 6.625v-1.875a3.375 3.375 0 0 0-3.375-3.375h-1.5a1.125 1.125 0 0 1-1.125-1.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H9.75"
                                        />
                                      </svg>
                                    </button>
                                  </span>
                                </div>
                              </div>
                            
                            {/* Manage Subscription Button */}
                            {lemonSqueezyData?.urls?.customer_portal && (
                              <div class="group bg-black py-2 rounded-b-[10px]">
                                <a
                                  href={lemonSqueezyData.urls.customer_portal}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  class="relative text-white flex w-full items-center justify-center px-4 py-2 hover:!text-[#69D3C6] transition-all duration-300 group-hover:bg-transparent"
                                >
                                  <span class="flex items-center text-sm font-medium">
                                    Manage Subscription
                                    <svg class="ml-2 h-4 w-4 transition-transform duration-300 group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                                    </svg>
                                  </span>
                                </a>
                              </div>
                            )}
                          </div>
                        </div>

                        <div class="flex flex-col rounded-[12px] bg-gradient-to-r from-[rgba(41,58,142,1)] to-[rgba(59,159,168)]">
                          <div class="flex flex-col bg-neutral-100/90 dark:bg-neutral-800/90 border border-[rgba(59,159,168)] rounded-[10px] h-full">
                            <div class="flex flex-col flex-1 p-4">
                              <h4 class="font-medium text-neutral-700 mb-4 mx-auto my-0">Payment Method</h4>
                              <div class="flex-1 space-y-4">
                                {lemonSqueezyData?.card_brand && (
                                  <div class="flex flex-col">
                                    <span class="text-sm text-neutral-500">Card</span>
                                    <span class="text-base font-medium text-neutral-700 capitalize">
                                      {lemonSqueezyData.card_brand} ending in {lemonSqueezyData.card_last_four}
                                    </span>
                                  </div>
                                )}
                                <div class="flex flex-col">
                                  <span class="text-sm text-neutral-500">Next Payment</span>
                                  <span class="text-base font-medium text-neutral-700">
                                    {lemonSqueezyData?.renews_at ? 
                                      new Date(lemonSqueezyData.renews_at).toLocaleDateString() : 'N/A'}
                                  </span>
                                </div>

                                {lemonSqueezyData?.trial_ends_at && (
                                  <div class="flex flex-col">
                                    <span class="text-sm text-neutral-500">Trial Ends</span>
                                    <span class="text-base font-medium text-neutral-700">
                                      {new Date(lemonSqueezyData.trial_ends_at).toLocaleDateString()}
                                    </span>
                                  </div>
                                )}  
                              </div>
                            </div>

                            {lemonSqueezyData?.urls?.update_payment_method && (
                              <div class="group bg-black py-2 rounded-b-[10px]">
                                <a 
                                  href={lemonSqueezyData.urls.update_payment_method}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  class="relative text-white flex w-full items-center justify-center px-4 py-2 hover:!text-[#69D3C6] transition-all duration-300 group-hover:bg-transparent"
                                >
                                  <span class="flex items-center text-sm font-medium">
                                    Update Payment Method
                                    <svg class="ml-2 h-4 w-4 transition-transform duration-300 group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                                    </svg>
                                  </span>
                                </a>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>

                      <br>
                      <div class="flex flex-col rounded-[12px] bg-gradient-to-r from-[rgba(41,58,142,1)] to-[rgba(59,159,168)]">
                        <div class="flex flex-col bg-neutral-100/90 dark:bg-neutral-800/90 border border-[rgba(59,159,168)] rounded-[10px] h-full">
                          <div class="flex flex-col flex-1 p-4">
                            <h4 class="font-medium my-0 mx-auto text-neutral-700 mb-4">Generate Invoice</h4>
                            <div class="flex-1 space-y-4">
                              {invoices && invoices.length > 0 ? (
                                <div class="space-y-3">
                                  {invoices.map((invoice: LemonSqueezyInvoice) => (
                                    <div class="flex bg-transparent flex-col p-4 rounded-lg">
                                      <span class="text-sm text-neutral-500 mb-2">Current Subscription Effective Date</span>
                                      <span class="text-base font-medium text-neutral-700 mb-3">
                                        {new Date(invoice.attributes.created_at).toLocaleDateString()}
                                      </span>
                                            
                                      <a
                                        href={invoice.attributes.urls.invoice_url}
                                        target="_blank"
                                        rel="noopener noreferrer"
                                        class="hover:!text-[#69D3C6] mt-4 max-w-md mx-auto my-0 group flex items-center justify-center gap-2 px-4 py-2 text-sm text-white bg-black rounded-lg hover:bg-neutral-800 transition-all duration-200"
                                      >
                                        Generate Custom Invoice
                                        <svg 
                                          xmlns="http://www.w3.org/2000/svg" 
                                          fill="none" 
                                          viewBox="0 0 24 24" 
                                          stroke-width="1.5" 
                                          stroke="currentColor" 
                                          class="w-4 h-4 transition-transform duration-200 group-hover:translate-x-0.5"
                                        >
                                          <path stroke-linecap="round" stroke-linejoin="round" d="                            h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25" />
                                          </svg>
                                        </a>
                                        
                                        <div class="mt-3 p-3 bg-neutral-50 rounded-lg">
                                          <div class="flex justify-center gap-2">
                                            
                                            <span class="text-xs text-neutral-500 flex-grow">
                                              This will redirect you to Lemon Squeezy's invoice form, where you can customize the invoice language before downloading the PDF.
                                            </span>
                                          </div>
                                        </div>
                                      </div>
                                    ))}
                                  </div>
                                ) : (
                                  <div class="flex flex-col items-center justify-center py-6 text-center">
                                    <svg 
                                      xmlns="http://www.w3.org/2000/svg" 
                                      fill="none" 
                                      viewBox="0 0 24 24" 
                                      stroke-width="1.5" 
                                      stroke="#68D4C6" 
                                      class="w-12 h-12 mb-3"
                                    >
                                      <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z" />
                                    </svg>
                                    <span class="text-sm text-neutral-500">No invoices available yet</span>
                                  </div>
                                )}
                              </div>
                            </div>
                          </div>
                        </div>

                  ) : (
                <div class="max-w-3xl mx-auto mb-4">
                  <div class="flex flex-col rounded-[12px] bg-gradient-to-r from-[rgba(41,58,142,1)] to-[rgba(59,159,168)]">
                    <div class="flex flex-col bg-neutral-100/90 dark:bg-neutral-800/90 border border-[rgba(59,159,168)] rounded-[10px] h-full">
                      <div class="flex flex-col flex-1 p-6 text-center">
                        <div class="mb-4">
                          <svg class="mx-auto h-12 w-12 text-neutral-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>
                        </div>
                        <h3 class="text-lg font-medium text-neutral-700 mb-2 mx-auto my-0">Basic Plan</h3>
                        <p class="text-sm text-neutral-500 mb-6 mx-auto my-0">
                          Upgrade to <a href="/pricing"><span class="font-semibold hover:text-[#69D3C6]">Gitset Pro</span></a> to unlock unlimited feature usages and more.
                        </p>
                        <p class="text-sm text-neutral-500 mx-auto my-0">
                          Last checked: <span id="lastCheckTimeBasic">Checking...</span>
                        </p>
                      </div>
                      
                      <div class="group bg-black py-2 rounded-b-[10px]">
                        <div class="flex flex-row justify-between items-center px-4 gap-2">
                          <button
                            id="reloadButtonBasic"
                            class="relative text-white flex items-center justify-center px-4 py-2 hover:!text-[#69D3C6] transition-all duration-300 group-hover:bg-transparent disabled:opacity-50 disabled:cursor-not-allowed flex-1"
                          >
                            <span class="flex items-center text-sm font-medium">
                              Refresh Status
                              <svg
                                xmlns="http://www.w3.org/2000/svg"
                                width="16"
                                height="16"
                                viewBox="0 0 24 24"
                                fill="none"
                                stroke="currentColor"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                class="ml-2 transition-transform duration-500 group-hover:rotate-180"
                              >
                                <path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8" />
                                <path d="M21 3v5h-5" />
                                <path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16" />
                                <path d="M8 16H3v5" />
                              </svg>
                            </span>
                          </button>
                          <a
                            href="/pricing"
                            class="relative text-white flex items-center justify-center px-4 py-2 hover:!text-[#69D3C6] transition-all duration-300 group-hover:bg-transparent flex-1"
                          >
                            <span class="flex items-center text-sm font-medium">
                              View Pro Features
                              <svg class="ml-2 h-4 w-4 transition-transform duration-300 group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                              </svg>
                            </span>
                          </a>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                )}
                  
                  <div class="flex justify-center mt-12">
                    <a href="/">
                      <button
                        class="dark:text-neutral-700 text-sm text-neutral-200 dark:bg-neutral-200 bg-neutral-700 px-6 py-4 rounded-[10px] transition-all duration-300 hover:text-[rgb(91,207,218)] dark:hover:text-[rgb(91,207,218)] cursor-pointer whitespace-nowrap flex items-center justify-center order-2 sm:order-1"
                        >
                        Back
                      </button>
                    </a>   
                  </div>
                </div>
          </CTA>
          <br />
          
          <Footer />
        </div>
      </main>
    </div>
  </div>
</Layout>

<script define:vars={{ userId, userEmail }}>
  function updateLastCheckTime() {
      const lastCheckElements = [
          document.getElementById('lastCheckTimePro'),
          document.getElementById('lastCheckTimeBasic')
      ].filter(element => element !== null);

      const now = new Date();
      const options = {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit',
          timeZoneName: 'short'
      };

      lastCheckElements.forEach(element => {
          element.textContent = now.toLocaleDateString(undefined, options);
      });
  }

  updateLastCheckTime();

  const reloadButtons = [
    document.getElementById('reloadButtonPro'),
    document.getElementById('reloadButtonBasic')
  ].filter(button => button !== null);

  reloadButtons.forEach(button => {
    button.addEventListener('click', async () => {
      button.disabled = true;
      try {
        const response = await fetch('/api/subscription/reload', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ userId, userEmail })
        });
        if(response.ok) window.location.reload();
      } catch(error) {
        console.error('Error reloading subscription:', error);
      } finally {
        button.disabled = false;
      }
    });
  });
</script>
<style>
  .dashboard-container {
    margin: 0 auto;
    padding: 1rem;
  }

  .card {
    --tw-text-opacity: 1;
    color: rgb(var(--ac-color-500), var(--tw-text-opacity));
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    padding: 1.5rem;
    transition: box-shadow 0.3s ease;
  }

  .card:hover {
    box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
  }

  .email-input {
    border: 1px solid #d1d5db;
  }

  .email-input:disabled {
    opacity: 0.7;
  }

  .truncate {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .bg-gray-100 {
    --tw-bg-opacity: 1;
    background-color: rgb(115 118 125 / 8%);
}

.bg-green-500 {
    background-color: #10B981;
  }

  .bg-blue-500 {
    background-color: #3B82F6;
  }

  .text-white {
    color: #FFFFFF;
  }

  .text-xs {
    font-size: 0.75rem;
    line-height: 1rem;
  }

  .px-2 {
    padding-left: 0.5rem;
    padding-right: 0.5rem;
  }

  .py-1 {
    padding-top: 0.25rem;
    padding-bottom: 0.25rem;
  }

  .rounded {
    border-radius: 0.25rem;
  }

  .mr-2 {
    margin-right: 0.5rem;
  }

  .mb-2 {
    margin-bottom: 0.5rem;
  }

  /* Additional styles for subscription section */
  .bg-green-50 {
    background-color: #f0fdf4;
  }
  
  .text-green-800 {
    color: #166534;
  }
  
  .border-green-200 {
    border-color: #bbf7d0;
  }
  
  .text-green-400 {
    color: #4ade80;
  }

</style>