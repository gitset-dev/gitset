---
import Layout from "../layouts/Layout.astro";
import Header from '../components/layout/Header.astro';
import CTA from '../sections/CTA.astro';
import Footer from '../components/layout/Footer.astro';
import Content from '../layouts/Content.astro';
import Sidebar from '../layouts/Sidebar.astro';
import { eq, desc, and } from "drizzle-orm";
import { db } from "../db";
import { sessions, users, loginLogs, oauthTokens } from "../db/schema";

const userId = Astro.locals.userId;
const userIsLoggedIn = !!userId;
const sessionToken = Astro.cookies.get("app_auth_token")?.value;

if (!sessionToken) {
  return Astro.redirect("/login");
}

const userInfo = await db.query.sessions.findFirst({
  where: eq(sessions.id, sessionToken),
  with: {
    user: {
      with: {
        oauthTokens: {
          columns: {
            strategy: true,
            accessToken: true,
          },
        },
        loginLogs: {
          orderBy: desc(loginLogs.loggedInAt),
        },
      },
    },
  },
});

const githubToken = userInfo?.user?.oauthTokens?.find(token => token.strategy === 'github')?.accessToken;
if (!githubToken) {
  return Astro.redirect("/login?error=missing+github+authorization");
}

const userEmail = userInfo?.user?.email;
const userPlan = userInfo?.user?.plan || 'basic';
const githubUserInfoUrl = "https://api.github.com/user";
const githubReposUrl = "https://api.github.com/user/repos";

async function getGithubUserData(token: string) {
  try {
    const response = await fetch(githubUserInfoUrl, {
      method: "GET",
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });

    if (!response.ok) {
      throw new Error("Error getting user data from GitHub");
    }

    const data = await response.json();
    return data;
  } catch (error) {
    console.error("Error:", error);
    return null;
  }
}

async function getGithubUserRepos(token: string) {
  try {
    let allRepos: any[] = [];
    let currentPage = 1;
    let hasNextPage = true;
    
    while (hasNextPage) {
      const response = await fetch(`${githubReposUrl}?page=${currentPage}&per_page=100&sort=updated`, {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json"
        }
      });

      if (!response.ok) {
        throw new Error(`Error getting repositories from GitHub: ${response.statusText}`);
      }

      const repos = await response.json();
      allRepos = [...allRepos, ...repos];

      hasNextPage = repos.length === 100;
      currentPage++;
    }

    return allRepos;
  } catch (error) {
    console.error("Error:", error);
    return [];
  }
};

const githubUserData = await getGithubUserData(githubToken);
const githubUserRepos = await getGithubUserRepos(githubToken);

const { searchParams } = Astro.url;
const selectedRepo = searchParams.get('repo');
---

<Layout title="GitSet - Issues Handler">
  <Sidebar />
  <div class="flex flex-col min-h-screen">
    <div class="hidden lg:block fixed w-64 h-full">
      <Sidebar />
    </div>
    
    <div class="flex-1 lg:ml-64 flex flex-col">
      <Header />
      <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-8 mt-16 lg:mt-0 top">
        <div class="flex justify-center mt-16"></div>
        <CTA
          align="center"
          title={`<span id="cta-title"><strong>Issues</strong> Handler</span>`}
          description={`
            <span id="cta-description">
              Create and manage GitHub issues with AI-assisted descriptions. <br>
              Effortlessly generate detailed issues and initiate branches directly from them.
            </span>
          `}
        >
            ) : (
              <div class="text-center p-8 bg-gray-100 dark:bg-gray-800 rounded-lg shadow">
                <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100">
                  GitHub Authentication Required
                </h3>
                <p class="mt-2 text-gray-600 dark:text-gray-400">
                  Please connect your GitHub account to use this feature.
                </p>
                <a
                  href="/api/auth/github"
                  class="mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                >
                  Connect GitHub
                </a>
              </div>
            )}
          </div>
          <div class="flex gap-2.5 mt-4 relative top-4 mx-auto my-0 justify-center">
            {/* <a href="/">
              <button
                class="dark:text-neutral-700 text-sm text-neutral-200 dark:bg-neutral-200 bg-neutral-700 px-6 py-4 rounded-[10px] transition-all duration-300 hover:text-[rgb(91,207,218)] dark:hover:text-[rgb(91,207,218)] cursor-pointer whitespace-nowrap flex items-center justify-center order-2 sm:order-1"
              >
                Back
              </button>
            </a> */}
          </div>
        </CTA>
      </div>
      <Footer />
    </div>
  </div>
</Layout>