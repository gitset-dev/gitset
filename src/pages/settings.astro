---
import Layout from '../layouts/Layout.astro';
import Header from '../components/layout/Header.astro';
import CTA from '../sections/CTA.astro';
import Sidebar from '../layouts/Sidebar.astro';
import { eq, desc, and, gte } from "drizzle-orm";
import { db } from "../db";
import { loginLogs, sessions } from "../db/schema";

interface GithubUserData {
  login: string;
  id: number;
}

const authToken = Astro.cookies.get("app_auth_token")?.value;
const sessionToken = Astro.cookies.get("app_auth_token")?.value;

if (!sessionToken) {
  return Astro.redirect("/");
}

if (!authToken) {
  return Astro.redirect("/login");
}

const userInfo = await db.query.sessions.findFirst({
  where: eq(sessions.id, sessionToken as string),
  with: {
    user: {
      with: {
        oauthTokens: {
          columns: {
            strategy: true,
            accessToken: true
          },
        },
        loginLogs: {
          orderBy: desc(loginLogs.loggedInAt),
        },
      },
    },
  },
});

const githubUserInfoUrl = "https://api.github.com/user";

async function getGithubUserData(token: string): Promise<GithubUserData | null> {
  try {
    const response = await fetch(githubUserInfoUrl, {
      method: "GET",
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });

    if (!response.ok) {
      throw new Error("Error al obtener datos del usuario desde GitHub");
    }

    const data = await response.json();
    return data;
  } catch (error) {
    console.error("Error:", error);
    return null;
  }
}

const githubToken = userInfo?.user?.oauthTokens?.find(token => token.strategy === 'github')?.accessToken;
const githubUserData = githubToken ? await getGithubUserData(githubToken) : null;
const logs = userInfo?.user?.loginLogs.sort((a, b) =>
  a.sessionId === sessionToken ? -1 : 1
);

function capitalizeFirstWord(text: string) {
  return text.charAt(0).toUpperCase() + text.slice(1);
}

---
<Layout title="Gitset - Smart AI Docs & Versioning for GitHub Repositories.">
  <Sidebar />
  <div class="flex flex-col min-h-screen">
    <div class="hidden lg:block fixed w-64 h-full">
      <Sidebar />
    </div>
    
    <div class="flex-1 lg:ml-64 flex flex-col">
      <Header />
    <main class="flex-1 overflow-x-hidden overflow-y-auto bg-gray-50">
      <div class="container relative top-[70px] mx-auto px-4 sm:px-6 lg:px-8 py-8 lg:mt-0">
        <div class="flex justify-center"></div>
        <CTA
          
          align="center"
          title={`<span id="cta-title"><strong>Account Settings</strong></span>`}
          description={`
            <span id="cta-description">
            </span>
          `}
        >
            <div class="px-4 py-5 sm:p-6">
              <div class="w-full flex justify-center mb-4">
                <h2 class="text-lg leading-6 font-medium text-neutral-700 dark:text-neutral-700">
                  Personal Information
                </h2>
              </div>
              <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mt-4 max-w-2xl mx-auto">
                <div class="w-full">
                  <label class="text-neutral-700 block text-sm font-medium text-center mb-1">
                    Email
                  </label>
                  <span
                    class="block text-neutral-700 rounded-[10px]  w-full border  rounded-[10px]-md shadow-sm py-1.5 px-3 sm:text-sm dark:border-gray-600 text-center"
                  >
                    {userInfo?.user?.email}
                  </span>
                </div>
                <div class="w-full">
                  <label class="text-neutral-700 block text-sm font-medium  text-center mb-1">
                    Your Name
                  </label>
                  <span
                    class="text-neutral-700 rounded-[10px] block w-full border rounded-[10px]-md shadow-sm py-1.5 px-3 sm:text-sm  dark:border-gray-600 text-center"
                  >
                    {userInfo?.user?.fullName}
                  </span>
                </div>
              </div>
            </div>

            {userInfo?.user?.oauthTokens && userInfo?.user?.oauthTokens.length > 0 && (
              <div class="mt-4 rounded-[10px]-[20px] shadow overflow-hidden sm:rounded-[10px]-[20px] w-full">
                <div class="px-4 py-5 sm:p-6">
                  <div class="w-full flex justify-center mb-4">
                    <h2 class="text-lg leading-6 font-medium text-neutral-700 dark:text-neutral-700">
                      Connected Accounts
                    </h2>
                  </div>
                  <div class="flex flex-wrap justify-center items-center gap-4">
                    {userInfo?.user?.oauthTokens
                      .filter(provider => provider.strategy === "github")
                      .map((provider) => (
                        <div class="flex items-center">
                          <div class:list={["flex items-center bg-black dark:bg-black rounded-[10px] px-4 py-2"]}>
                            <svg class="h-5 w-5 mr-2 text-white dark:text-white" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                              <path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12" fill="currentColor"/>
                            </svg>
                            <span class="text-sm text-white dark:text-white">{capitalizeFirstWord(provider.strategy)}</span>
                          </div>
                        </div>
                      ))
                    }
                  </div>
                </div>
              </div>
            )}

            <div class="mt-4 text-neutral-700 dark:text-neutral-700 rounded-[10px]-[20px] shadow overflow-hidden sm:rounded-[10px]-[20px] w-full">
              <div class="px-4 py-5 sm:p-6">
                <div class="w-full flex justify-center mb-4">
                  <h2 class="text-lg leading-6 font-medium text-neutral-700 dark:text-neutral-700">
                    Active Sessions
                  </h2>
                </div>
                <div class="space-y-4">
                  {logs?.map((log) => (
                    <div class="flex items-center justify-between bg-gray-50 dark:bg-gray-700 p-4 rounded-[10px]-[20px]">
                      <div class="flex items-center space-x-4">
                        <div>
                          <p class="text-sm font-medium text-neutral-700 dark:text-neutral-700">
                            {`${capitalizeFirstWord(log.os)} - ${capitalizeFirstWord(log.device)} - ${capitalizeFirstWord(log.browser)}`}
                          </p>
                          <p class="text-sm text-neutral-700 dark:text-neutral-700">
                            Logged in: {new Intl.DateTimeFormat("en-US").format(new Date(log.loggedInAt!))}
                          </p>
                        </div>
                      </div>
                      {sessionToken === log.sessionId && (
                        <span class="flex justify-center flex-wrap content-center items-center pt-2 pb-2.5 pl-4 pr-4 text-sm leading-5 bg-black text-white border border-[#69D2C4] rounded-[10px] cursor-initial transition-colors duration-300">
                          This Device
                        </span>
                      )}
                      {sessionToken !== log.sessionId && (
                        <button
                          data-sid={log.sessionId}
                          class="pt-2 pb-2.5 pl-4 pr-4 text-sm leading-5 bg-black text-white border border-[#EE4234] rounded-[10px] cursor-pointer transition-colors duration-300 hover:bg-[#EE4234]"
                        >
                          Revoke Access
                        </button>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            </div>

          </div>
        </div>
      </div>
    </Content>
  </div>
</Layout>

<script>
  const revokeAccessBtns = document.querySelectorAll(".revoke-access");
  
  revokeAccessBtns.forEach((btn) => {
    btn.addEventListener("click", async (e) => {
      await fetch("/api/auth/revoke-access", {
        method: "POST",
        body: JSON.stringify({ sessionId: btn.getAttribute("data-sid") }),
      });
      window.location.reload();
    });
  });
</script>

<style>
  .email-section {
    margin-top: 2rem;
    text-align: center;
  }

  .user-indicator {
    font-weight: bold;
    display: block;
    margin-top: 1rem;
  }

  .email-input {
    width: 100%;
    max-width: 400px;
    padding: 0.5rem;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    font-size: 1rem;
    color: #333;
  }

  .email-input:disabled {
    background-color: #f9f9f9;
    color: #666;
  }

  .connected-accounts {
    margin-top: 2rem;
    text-align: center;
  }

  .sub-title {
    font-size: 1.25rem;
    margin-bottom: 0.5rem;
    font-weight: bold;
  }

  .accounts-list {
    display: flex;
    justify-content: center;
    gap: 1rem;
  }

  .log-item {
    display: flex;
    justify-content: space-between;
    padding: 1rem;
    border-bottom: 1px solid #eee;
  }

  .log-info {
    flex: 1;
  }

  .log-details {
    flex: 1;
    text-align: right;
  }

  .this-device-badge {
    background-color: #59b4aa;
    color: white;
    border-radius: 4px;
    padding: 0.2rem 0.5rem;
    margin-right: 0.5rem;
  }

  .revoke-access {
    background-color: #f44336;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
  }

  .revoke-access:hover {
    background-color: #d32f2f;
  }

  @media (prefers-color-scheme: dark) {
    .email-input {
      background-color: #333;
      color: #f9f9f9;
      border: 1px solid #555;
    }

    .user-indicator {
      color: #f9f9f9;
    }
    
    .this-device-badge {
      background-color: #6fcec3;
    }
  }
</style>
