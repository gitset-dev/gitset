---
import Layout from '../layouts/Layout.astro';
import Header from '../components/layout/Header.astro';
import CTA from '../sections/CTA.astro'
import Footer from '../components/layout/Footer.astro'
import Sidebar from '../layouts/Sidebar.astro';
import { eq, desc } from "drizzle-orm";
import { db } from "../db";
import { loginLogs, sessions } from "../db/schema";

const userId = Astro.locals.userId;

interface RawGitHubCommit {
  sha: string;
  commit: {
    author: {
      name: string;
      email: string;
      date: string;
    };
    message: string;
  };
  author: {
    login: string;
    id: number;
    avatar_url: string;
  };
}

interface GitHubTag {
  name: string;
  commit: {
    sha: string;
  };
}

interface GitHubRelease {
  id: number;
  tag_name: string;
  name: string;
  target_commitish: string;
}

interface EnhancedCommit extends RawGitHubCommit {
  tags: GitHubTag[];
  releases: GitHubRelease[];
}

interface Props {
  githubUserData: any;
  userInfo: any;
  githubUserRepos: any[];
  selectedRepo: string | null;
  commits: any[];
  githubToken: string;
  userId: string | null | { userId: any };
  userEmail: string | undefined | { userEmail: any };
}



const userIsLoggedIn = !!Astro.locals.userId;
const sessionToken = Astro.cookies.get("app_auth_token")?.value;

if (!sessionToken) {
  return Astro.redirect("/");
}

const userInfo = await db.query.sessions.findFirst({
  where: eq(sessions.id, sessionToken),
  with: {
    user: {
      with: {
        oauthTokens: {
          columns: {
            strategy: true,
            accessToken: true,
          },
        },
        loginLogs: {
          orderBy: desc(loginLogs.loggedInAt),
        },
      },
    },
  },
});


const githubToken = userInfo?.user?.oauthTokens?.find(token => token.strategy === 'github')?.accessToken;

if (!githubToken) {
  return Astro.redirect("/login?error=missing+github+authorization");
}

const githubUserInfoUrl = "https://api.github.com/user";
const githubReposUrl = "https://api.github.com/user/repos";

async function getGithubUserData(token: string) {
  try {
    const response = await fetch(githubUserInfoUrl, {
      method: "GET",
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });

    if (!response.ok) {
      throw new Error("Error al obtener datos del usuario desde GitHub");
    }

    const data = await response.json();
    return data;
  } catch (error) {
    console.error("Error:", error);
  }
}

async function getGithubUserRepos(token: string) {
  try {
    let allRepos: any[] = [];
    let currentPage = 1;
    let hasNextPage = true;
    
    while (hasNextPage) {
      const response = await fetch(`${githubReposUrl}?page=${currentPage}&per_page=100`, {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json"
        }
      });

      if (!response.ok) {
        throw new Error(`Error al obtener repositorios desde GitHub: ${response.statusText}`);
      }

      const repos = await response.json();
      allRepos = [...allRepos, ...repos];

      const linkHeader = response.headers.get('Link');
      hasNextPage = linkHeader?.includes('rel="next"') ?? false;
      
      if (hasNextPage) {
        currentPage++;
      }

      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    return allRepos;
  } catch (error) {
    console.error("Error:", error);
    throw error; 
  }
}

async function getRepoTags(token: string, repo: string) {
  const tagsUrl = `https://api.github.com/repos/${githubUserData.login}/${repo}/tags`;
  try {
    const response = await fetch(tagsUrl, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Accept": "application/vnd.github.v3+json"
      }
    });
    if (!response.ok) {
      throw new Error("Failed to fetch tags");
    }
    return await response.json();
  } catch (error) {
    console.error("Error fetching tags:", error);
    return [];
  }
}


const userEmail = userInfo?.user?.email;
const userPlan = userInfo?.user?.plan;

async function getRepoCommits(token: string, repo: string): Promise<EnhancedCommit[]> {
  const baseUrl = `https://api.github.com/repos/${githubUserData.login}/${repo}`;
  const commitsUrl = `${baseUrl}/commits`;
  const tagsUrl = `${baseUrl}/tags`;
  const releasesUrl = `${baseUrl}/releases`;

  async function getAllCommits(): Promise<RawGitHubCommit[]> {
    let allCommits: RawGitHubCommit[] = [];
    let page = 1;
    const perPage = 100;

    while (true) {
      const response = await fetch(`${commitsUrl}?page=${page}&per_page=${perPage}`, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Accept": "application/vnd.github.v3+json"
        }
      });

      if (!response.ok) {
        throw new Error(`Failed to fetch commits: ${response.statusText}`);
      }

      const commits: RawGitHubCommit[] = await response.json();
      allCommits = allCommits.concat(commits);

      if (commits.length < perPage) {
        break;
      }

      page++;
    }

    return allCommits;
  }

  try {
    const [commits, tags, releases] = await Promise.all([
      getAllCommits(),
      fetch(tagsUrl, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Accept": "application/vnd.github.v3+json"
        }
      }).then(res => res.json() as Promise<GitHubTag[]>),
      fetch(releasesUrl, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Accept": "application/vnd.github.v3+json"
        }
      }).then(res => res.json() as Promise<GitHubRelease[]>)
    ]);

    const enhancedCommits: EnhancedCommit[] = commits.map((commit) => {
      const commitTags = tags.filter((tag) => tag.commit.sha === commit.sha);
      const commitReleases = releases.filter((release) => 
        release.target_commitish === commit.sha || 
        (release.tag_name && tags.find((tag) => tag.name === release.tag_name)?.commit.sha === commit.sha)
      );
      
      return {
        ...commit,
        tags: commitTags,
        releases: commitReleases,
        commit: {
          ...commit.commit,
          author: {
            ...commit.commit.author,
            date: new Date(commit.commit.author.date).toISOString()
          }
        }
      };
    });

    return enhancedCommits;
  } catch (error) {
    console.error("Error fetching repository data:", error);
    return [];
  }
}

const githubUserData = await getGithubUserData(githubToken);

const githubUserRepos = await getGithubUserRepos(githubToken);

const { searchParams } = Astro.url;
const selectedRepo = searchParams.get('repo');

let commits: EnhancedCommit[] = [];
if (selectedRepo) {
  commits = await getRepoCommits(githubToken, selectedRepo);
}

// --------------------------------------------------------------
---
<Layout title="Gitset - Advanced AI-Driven GitHub Tools Suite.">
  <Sidebar />
  <div class="flex flex-col min-h-screen">
    <div class="hidden lg:block fixed w-64 h-full">
      <Sidebar />
    </div>
    
    <div class="flex-1 lg:ml-64 flex flex-col">
      <Header />
        <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-8 mt-16 lg:mt-0 top">
          <div class="flex justify-center mt-16"></div>
          <CTA
            align="center"
            title={`<span id="cta-title"><strong>Tags & Releases</strong> Manager</span>`}
            description={`
              <span id="cta-description">
                Manage your project's versioning with a streamlined interface. <br />
                Create, edit, and track milestones efficiently through an intuitive tag and release system.
              </span>
            `}
          >
            <div class="flex gap-2.5 mt-4 relative top-4 mx-auto my-0 justify-center">
              <a href="/">
                <button
                    
                  class="dark:text-neutral-700 text-sm text-neutral-200 dark:bg-neutral-200 bg-neutral-700 px-6 py-4 rounded-[10px] transition-all duration-300 hover:text-[rgb(91,207,218)] dark:hover:text-[rgb(91,207,218)] cursor-pointer whitespace-nowrap flex items-center justify-center order-2 sm:order-1"
                >
                  Back
                </button>
              </a>
          </CTA>
        </div>
      <Footer />
    </div>
  </div>

<style>
  .dashboard-container {
    margin: 0 auto;
    padding: 1rem;
  }

  .card {
    --tw-text-opacity: 1;
    color: rgb(var(--ac-color-500), var(--tw-text-opacity));
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    padding: 1.5rem;
    transition: box-shadow 0.3s ease;
  }

  .card:hover {
    box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
  }

  .email-input {
    border: 1px solid #d1d5db;
  }

  .email-input:disabled {
    opacity: 0.7;
  }

  .truncate {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .bg-gray-100 {
    --tw-bg-opacity: 1;
    background-color: rgb(115 118 125 / 8%);
}

.bg-green-500 {
    background-color: #10B981;
  }

  .bg-blue-500 {
    background-color: #3B82F6;
  }

  .text-white {
    color: #FFFFFF;
  }

  .text-xs {
    font-size: 0.75rem;
    line-height: 1rem;
  }

  .px-2 {
    padding-left: 0.5rem;
    padding-right: 0.5rem;
  }

  .py-1 {
    padding-top: 0.25rem;
    padding-bottom: 0.25rem;
  }

  .rounded {
    border-radius: 0.25rem;
  }

  .mr-2 {
    margin-right: 0.5rem;
  }

  .mb-2 {
    margin-bottom: 0.5rem;
  }

</style>